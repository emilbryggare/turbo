import{createRequire as e}from"module";import*as r from"@vercel/turbopack-next/compiled/stacktrace-parser";var t={};(()=>{t.d=(e,r)=>{for(var n in r){if(t.o(r,n)&&!t.o(e,n)){Object.defineProperty(e,n,{enumerable:true,get:r[n]})}}}})();(()=>{t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r)})();if(typeof t!=="undefined")t.ab=new URL(".",import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/)?1:0,-1)+"/";var n={};t.d(n,{W:()=>o,x:()=>structuredError});const a=e(import.meta.url)("node:net");var x=e=>{var r={};t.d(r,e);return r};var y=e=>()=>e;const s=x({["parse"]:()=>r.parse});function structuredError(e){return{name:e.name,message:e.message,stack:(0,s.parse)(e.stack)}}function createIpc(e){const r=a.createConnection(e,"127.0.0.1");const t=[];const n=[];function pushPacket(e){const r=n.shift();if(r!=null){r(JSON.parse(e.toString("utf8")))}else{t.push(e)}}let s={type:"waiting"};let c=Buffer.alloc(0);r.once("connect",(()=>{r.on("data",(e=>{c=Buffer.concat([c,e]);e:while(true){switch(s.type){case"waiting":{if(c.length>=4){const e=c.readUInt32BE(0);c=c.subarray(4);s={type:"packet",length:e}}else{break e}break}case"packet":{if(c.length>=s.length){const e=c.subarray(0,s.length);c=c.subarray(s.length);s={type:"waiting"};pushPacket(e)}else{break e}break}}}}))}));function send(e){const t=Buffer.from(JSON.stringify(e),"utf8");const n=Buffer.alloc(4);n.writeUInt32BE(t.length);r.write(n);return new Promise(((e,n)=>{r.write(t,(r=>{if(r!=null){n(r)}else{e()}}))}))}return{async recv(){const e=t.shift();if(e!=null){return JSON.parse(e.toString("utf8"))}const r=await new Promise((e=>{n.push((r=>{e(r)}))}));return r},send(e){return send(e)},async sendError(e){try{await send({type:"error",...structuredError(e)})}catch(e){}process.exit(1)}}}const c=process.argv[2];const o=createIpc(parseInt(c,10));process.on("uncaughtException",(e=>{o.sendError(e)}));var u=n.W;var i=n.x;export{u as IPC,i as structuredError};